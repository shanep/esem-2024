@ARTICLE{Oikawa2023-ms,
  title    = "The Experience of Developing a {FAT} File System Module in the
              Rust Programming Language",
  author   = "Oikawa, Shuichi",
  journal  = "Stud. Comput. Intell.",
  volume   =  1074,
  pages    = "45 -- 58",
  year     =  2023,
  keywords = "slr-paper-rust-kernel;slr-rust-read;scopus"
}

@ARTICLE{Vishnunaryan2022-yd,
  title    = "{HarSaRK\_multi\_rs}: A Hard Real-time Kernel for Multi-core
              Microcontrollers in Rust Language",
  author   = "Vishnunaryan, K I and Banda, Gourinath",
  journal  = "Smart Innovation, Systems and Technologies",
  volume   =  283,
  pages    = "21 -- 32",
  year     =  2022,
  keywords = "slr-paper-rust-kernel;scopus"
}

@ARTICLE{Liu2024-xe,
  title    = "An {OS} Kernel Based on {RISC-V} Architecture",
  author   = "Liu, Guojun and Huang, Jili and Liu, Xiaoyan",
  journal  = "Commun. Comput. Inf. Sci.",
  volume   =  1899,
  pages    = "3 -- 16",
  year     =  2024,
  keywords = "slr-paper-rust-kernel;slr-rust-read;slr-forward-snowball;scopus"
}

@INPROCEEDINGS{Liang2021-bo,
  title    = "Rustpi: A Rust-powered Reliable Micro-kernel Operating System",
  author   = "Liang, Yuanzhi and Wang, Lei and Li, Siran and Jiang, Bo",
  abstract = "Rustpi is a micro-kernel operating system implemented in Rust to
              explore how modern language features can help to build a reliable
              operating system. In our system, isolations between micro-kernel
              servers are achieved by Rust language instead of expensive
              hardware mechanisms. Moreover, Rust language features such as
              control-flow integrity and unwinding enable hardware transient
              fault detection and error recovery without resource leaking.
              Rustpi creatively integrates these features to enhance its
              reliability. Moreover, our design is also applicable to other
              Rust micro-kernel systems or even the Linux kernel.",
  pages    = "272 -- 273",
  year     =  2021,
  keywords = "Linux; Fault detection; Conferences; Reliability engineering;
              Feature extraction; Hardware; Software reliability; Operating
              Systems; reliability; fault
              tolerance;slr-paper-rust-kernel;slr-rust-read;slr-forward-snowball;scopus;IEEE"
}

@INPROCEEDINGS{Miller2019-xm,
  title     = "Practical Safe Linux Kernel Extensibility",
  booktitle = "Proceedings of the Workshop on Hot Topics in Operating Systems",
  author    = "Miller, Samantha and Zhang, Kaiyuan and Zhuo, Danyang and Xu,
               Shibin and Krishnamurthy, Arvind and Anderson, Thomas",
  abstract  = "The ability to extend kernel functionality safely has long been
               a design goal for operating systems. Modern operating systems,
               such as Linux, are structured for extensibility to enable
               sharing a single code base among many environments.
               Unfortunately, safety has lagged behind, and bugs in kernel
               extensions continue to cause problems. We study three recent
               kernel extensions critical to Docker containers (Overlay File
               System, Open vSwitch Datapath, and AppArmor) to guide further
               research in extension safety. We find that all the studied
               kernel extensions suffer from the same set of low-level memory,
               concurrency, and type errors. Though safe kernel extensibility
               is a well-studied area, existing solutions are heavyweight,
               requiring extensive changes to the kernel and/or expensive
               runtime checks. We then explore the feasibility of writing
               kernel extensions in a high-level, type safe language (i.e.,
               Rust) while preserving compatibility with Linux and find this to
               be an appealing approach. We show that there are key challenges
               to implementing this approach and propose potential solutions.",
  publisher = "Association for Computing Machinery",
  pages     = "170 -- 176",
  series    = "HotOS '19",
  year      =  2019,
  address   = "New York, NY, USA",
  keywords  = "operating systems, extensibility,
               Rust;slr-paper-rust-kernel;slr-rust-read;acm.bib;scopus",
  location  = "Bertinoro, Italy"
}

@INPROCEEDINGS{Narayanan2019-fd,
  title     = "{RedLeaf}: Towards An Operating System for Safe and Verified
               Firmware",
  booktitle = "Proceedings of the Workshop on Hot Topics in Operating Systems",
  author    = "Narayanan, Vikram and Baranowski, Marek S and Ryzhyk, Leonid and
               Rakamari{\'c}, Zvonimir and Burtsev, Anton",
  abstract  = "RedLeaf is a new operating system being developed from scratch
               to utilize formal verification for implementing provably secure
               firmware. RedLeaf is developed in a safe language, Rust, and
               relies on automated reasoning using satisfiability modulo
               theories (SMT) solvers for formal verification. RedLeaf builds
               on two premises: (1) Rust's linear type system enables practical
               language safety even for systems with tightest performance and
               resource budgets (e.g., firmware), and (2) a combination of
               SMT-based reasoning and pointer discipline enforced by linear
               types provides a unique way to automate and simplify
               verification effort scaling it to the size of a small OS kernel.",
  publisher = "Association for Computing Machinery",
  pages     = "37 -- 44",
  series    = "HotOS '19",
  year      =  2019,
  address   = "New York, NY, USA",
  keywords  = "slr-paper-rust-kernel;slr-rust-read;acm.bib;scopus",
  location  = "Bertinoro, Italy"
}

@INPROCEEDINGS{Li2019-ru,
  title     = "Securing the Device Drivers of Your Embedded Systems: Framework
               and Prototype",
  booktitle = "Proceedings of the 14th International Conference on
               Availability, Reliability and Security",
  author    = "Li, Zhuohua and Wang, Jincheng and Sun, Mingshen and Lui, John C
               S",
  abstract  = "Device drivers on Linux-powered embedded or IoT systems execute
               in kernel space thus must be fully trusted. Any fault in drivers
               may significantly impact the whole system. However, third-party
               embedded hardware manufacturers usually ship their proprietary
               device drivers with their embedded devices. These out-of-tree
               device drivers are generally of poor quality because of a lack
               of code audit. In this paper, we propose a new approach that
               helps third-party developers to improve the reliability and
               safety of device drivers without modifying the kernel: Rewriting
               device drivers in a memory-safe programming language called
               Rust. Rust's rigorous language model assists the device driver
               developers to detect many security issues at compile time. We
               designed a framework to help developers to quickly build device
               drivers in Rust. We also utilized Rust's security features to
               provide several useful infrastructures for developers so that
               they can easily handle kernel memory allocation and concurrency
               management, at the same time, some common bugs (e.g.
               use-after-free) can be alleviated. We demonstrate the generality
               of our framework by implementing a real-world device driver on
               Raspberry Pi 3, and our evaluation shows that device drivers
               generated by our framework have acceptable binary size for
               canonical embedded systems and the runtime overhead is
               negligible.",
  publisher = "Association for Computing Machinery",
  series    = "ARES '19",
  year      =  2019,
  address   = "New York, NY, USA",
  keywords  = "Rust, Linux Kernel, Device
               Drivers;slr-paper-rust-kernel;slr-rust-read;slr-forward-snowball;acm.bib;scopus",
  location  = "Canterbury, CA, United Kingdom"
}

@INPROCEEDINGS{Lankes2019-cm,
  title     = "Exploring Rust for Unikernel Development",
  booktitle = "Proceedings of the 10th Workshop on Programming Languages and
               Operating Systems",
  author    = "Lankes, Stefan and Breitbart, Jens and Pickartz, Simon",
  abstract  = "System-level development has been dominated by programming
               languages like C/C++ for decades. These languages are inherently
               unsafe, error-prone, and a major reason for vulnerabilities.
               High-level programming languages with a secure memory model and
               strong type system are able to improve the quality of the system
               software. In this paper, we explore the programming language
               Rust for kernel development and present RustyHermit, which is a
               unikernel completely written in Rust without any C/C++. We show
               that the support for RustyHermit can be transparently
               integratable in the Rust toolchain and common Rust applications
               are build-able on top of RustyHermit. Previously, we developed
               the C-based unikernel HermitCore with a similar design to
               RustyHermit and we are able to compare both kernels. We show
               that the performance of both kernels is similar and only ~3.27
               \% of RustyHermit relies on unsafe code, that cannot be checked
               by the compiler in detail.",
  publisher = "Association for Computing Machinery",
  pages     = "8--15",
  series    = "PLOS '19",
  month     =  oct,
  year      =  2019,
  address   = "New York, NY, USA",
  keywords  = "slr-paper-rust-kernel;slr-rust-read;slr-forward-snowball;acm.bib;scopus",
  location  = "Huntsville, ON, Canada"
}

@INPROCEEDINGS{Sung2020-bb,
  title     = "Intra-unikernel isolation with Intel memory protection keys",
  booktitle = "Proceedings of the 16th {ACM} {SIGPLAN/SIGOPS} International
               Conference on Virtual Execution Environments",
  author    = "Sung, Mincheol and Olivier, Pierre and Lankes, Stefan and
               Ravindran, Binoy",
  abstract  = "Unikernels are minimal, single-purpose virtual machines. This
               new operating system model promises numerous benefits within
               many application domains in terms of lightweightness,
               performance, and security. Although the isolation between
               unikernels is generally recognized as strong, there is no
               isolation within a unikernel itself. This is due to the use of a
               single, unprotected address space, a basic principle of
               unikernels that provide their lightweightness and performance
               benefits. In this paper, we propose a new design that brings
               memory isolation inside a unikernel instance while keeping a
               single address space. We leverage Intel's Memory Protection Key
               to do so without impacting the lightweightness and performance
               benefits of unikernels. We implement our isolation scheme within
               an existing unikernel written in Rust and use it to provide
               isolation between trusted and untrusted components: we isolate
               (1) safe kernel code from unsafe kernel code and (2) kernel code
               from user code. Evaluation shows that our system provides such
               isolation with very low performance overhead. Notably, the
               unikernel with our isolation exhibits only 0.6\% slowdown on a
               set of macro-benchmarks.",
  publisher = "Association for Computing Machinery",
  pages     = "143 -- 156",
  series    = "VEE '20",
  year      =  2020,
  address   = "New York, NY, USA",
  keywords  = "unikernels, memory safety, memory protection
               keys;slr-paper-rust-kernel;slr-rust-read;acm.bib;scopus",
  location  = "Lausanne, Switzerland"
}

@INPROCEEDINGS{Li2021-xo,
  title     = "An incremental path towards a safer {OS} kernel",
  booktitle = "Proceedings of the Workshop on Hot Topics in Operating Systems",
  author    = "Li, Jialin and Miller, Samantha and Zhuo, Danyang and Chen, Ang
               and Howell, Jon and Anderson, Thomas",
  abstract  = "Linux has become the de-facto operating system of our age, but
               its vulnerabilities are a constant threat to service
               availability, user privacy, and data integrity. While one might
               scrap Linux and start over, the cost of that would be
               prohibitive due to Linux's ubiquitous deployment. In this paper,
               we propose an alternative, incremental route to a safer Linux
               through proper modularization and gradual replacement module by
               module. We lay out the research challenges and potential
               solutions for this route, and discuss the open questions ahead.",
  publisher = "Association for Computing Machinery",
  pages     = "183--190",
  series    = "HotOS '21",
  month     =  jun,
  year      =  2021,
  address   = "New York, NY, USA",
  keywords  = "verified systems, reliable systems, kernel
               safety;slr-paper-rust-kernel;slr-rust-read",
  location  = "Ann Arbor, Michigan"
}

@INPROCEEDINGS{Burtsev2021-mh,
  title     = "Isolation in Rust: What is Missing?",
  booktitle = "Proceedings of the 11th Workshop on Programming Languages and
               Operating Systems",
  author    = "Burtsev, Anton and Appel, Dan and Detweiler, David and Huang,
               Tianjiao and Li, Zhaofeng and Narayanan, Vikram and Zellweger,
               Gerd",
  abstract  = "Rust is the first practical programming language that has the
               potential to provide fine-grained isolation of untrusted
               computations at the language level. A combination of
               zero-overhead safety, i.e., safety without a managed runtime and
               garbage collection, and a unique ownership discipline enable
               isolation in systems with tight performance budgets, e.g.,
               databases, network processing frameworks, browsers, and even
               operating system kernels.Unfortunately, Rust was not designed
               with isolation in mind. Today, implementing isolation in Rust is
               possible but requires complex, ad hoc, and arguably error-prone
               mechanisms to enforce it outside of the language. We examine
               several recent systems that implement isolation in Rust but
               struggle with the shortcomings of the language. As a result of
               our analysis we identify a collection of mechanisms that can
               enable isolation as a first class citizen in the Rust ecosystem
               and suggest directions for implementing them.",
  publisher = "Association for Computing Machinery",
  pages     = "76--83",
  series    = "PLOS '21",
  month     =  oct,
  year      =  2021,
  address   = "New York, NY, USA",
  keywords  = "slr-paper-rust-kernel;slr-rust-read;slr-forward-snowball;acm.bib;scopus",
  location  = "Virtual Event, Germany"
}

@INPROCEEDINGS{Ayers2022-sf,
  title     = "Tighten rust's belt: shrinking embedded Rust binaries",
  booktitle = "Proceedings of the 23rd {ACM} {SIGPLAN/SIGBED} International
               Conference on Languages, Compilers, and Tools for Embedded
               Systems",
  author    = "Ayers, Hudson and Laufer, Evan and Mure, Paul and Park, Jaehyeon
               and Rodelo, Eduardo and Rossman, Thea and Pronin, Andrey and
               Levis, Philip and Van Why, Johnathan",
  abstract  = "Rust is a promising programming language for embedded software,
               providing low-level primitives and performance similar to C/C++
               alongside type safety, memory safety, and modern high-level
               language features. We find naive use of Rust leads to binaries
               much larger than their C equivalents. For flash-constrained
               embedded microcontrollers, this is prohibitive. We find four
               major causes of this growth: monomorphization, inefficient
               derivations, implicit data structures, and missing compiler
               optimizations. We present a set of embedded Rust programming
               principles which reduce Rust binary sizes. We apply these
               principles to an industrial Rust firmware application, reducing
               size by 76kB (19\%), and an open source Rust OS kernel binary,
               reducing size by 23kB (26\%). We explore compiler optimizations
               that could further shrink embedded Rust.",
  publisher = "Association for Computing Machinery",
  pages     = "121--132",
  series    = "LCTES 2022",
  month     =  jun,
  year      =  2022,
  address   = "New York, NY, USA",
  keywords  = "embedded systems, binary size,
               Rust;slr-paper-rust-kernel;slr-rust-read;slr-forward-snowball;acm.bib",
  location  = "San Diego, CA, USA"
}

@INPROCEEDINGS{Gonzalez2023-ek,
  title     = "Takeaways of Implementing a Native Rust {UDP} Tunneling Network
               Driver in the Linux Kernel",
  booktitle = "Proceedings of the 12th Workshop on Programming Languages and
               Operating Systems",
  author    = "Gonzalez, Am{\'e}lie and Mvondo, Djob and Bromberg,
               Y{\'e}rom-David",
  abstract  = "C is the primary programming language used in the Linux kernel.
               Recently, the Linux developer community oversaw the experimental
               addition of Rust into the kernel's build system. Networking is
               one of the areas often mentioned when discussing the adoption of
               Rust. In networking, both perfect memory management and
               performance are critical.In this paper, we present a Rust UDP
               tunneling driver for Linux, which provides UDP encapsulation
               between two peers. We use this driver to discuss design
               considerations of writing Rust networking code for Linux. We
               then compare the performance of our driver against a similar
               driver written in C. We find that our Rust driver performs
               slightly worse on a gigabit link for both latency (+0.1906\%,
               p-value = 1.464e--15) and throughput (--0.00090\%, p-value =
               6.004e--5). We then discuss potential causes for that loss.",
  publisher = "Association for Computing Machinery",
  pages     = "18--25",
  series    = "PLOS '23",
  month     =  oct,
  year      =  2023,
  address   = "New York, NY, USA",
  keywords  = "slr-paper-rust-kernel;slr-rust-read;slr-forward-snowball;acm.bib;scopus",
  location  = "<conf-loc>, <city>Koblenz</city>, <country>Germany</country>,
               </conf-loc>"
}

@INPROCEEDINGS{Ma2023-ef,
  title     = "Panic Recovery in Rust-based Embedded Systems",
  booktitle = "Proceedings of the 12th Workshop on Programming Languages and
               Operating Systems",
  author    = "Ma, Zhiyao and Chen, Guojun and Zhong, Lin",
  abstract  = "Stack unwinding is a well-established approach for handling
               panics in Rust programs. However, its feasibility on
               resource-constrained embedded systems has been unclear due to
               the associated overhead and complexity. This paper presents our
               experience of implementing stack unwinding and panic recovery
               within a Rust-based soft real-time embedded operating system. We
               describe several novel optimizations that help achieve adequate
               performance for a flying drone with a CPU overhead of 2.6\% and
               a storage overhead of 26.0\% to recover from panics in
               application tasks and interrupt handlers.",
  publisher = "Association for Computing Machinery",
  pages     = "66 -- 73",
  series    = "PLOS '23",
  year      =  2023,
  address   = "New York, NY, USA",
  keywords  = "slr-paper-rust-kernel;slr-rust-read;slr-forward-snowball;acm.bib;scopus",
  location  = "<conf-loc>, <city>Koblenz</city>, <country>Germany</country>,
               </conf-loc>"
}

@INPROCEEDINGS{Klimt2023-ob,
  title     = "On the Challenge of Sound Code for Operating Systems",
  booktitle = "Proceedings of the 12th Workshop on Programming Languages and
               Operating Systems",
  author    = "Klimt, Jonathan and Kr{\"o}ning, Martin and Lankes, Stefan and
               Monti, Antonello",
  abstract  = "The memory-safe systems programming language Rust is gaining
               more and more attention in the operating system development
               communities, as it provides memory safety without sacrificing
               performance or control. However, these safety guarantees only
               apply to the safe subset of Rust, while bare-metal programming
               requires some parts of the program to be written in unsafe Rust.
               Writing abstractions for these parts of the software that are
               sound, meaning that they guarantee the absence of undefined
               behavior and thus uphold the invariants of safe Rust, can be
               challenging. Producing sound code, however, is essential to
               avoid breakage when the code is used in new ways or the compiler
               behavior changes.In this paper, we present common patterns of
               unsound abstractions derived from the experience of reworking
               soundness in our kernel. During this process, we were able to
               remove over 400 unsafe expressions while discovering and fixing
               several hard-to-spot concurrency bugs along the way.",
  publisher = "Association for Computing Machinery",
  pages     = "83--90",
  series    = "PLOS '23",
  month     =  oct,
  year      =  2023,
  address   = "New York, NY, USA",
  keywords  = "unsafe, systems programming, soundness, safe, operating system,
               memory safety,
               Rust;slr-paper-rust-kernel;slr-rust-read;slr-forward-snowball;acm.bib;scopus",
  location  = "<conf-loc>, <city>Koblenz</city>, <country>Germany</country>,
               </conf-loc>"
}

@INPROCEEDINGS{Ijaz2023-da,
  title     = "Leveraging Rust for Lightweight {OS} Correctness",
  booktitle = "Proceedings of the 1st Workshop on Kernel Isolation, Safety and
               Verification",
  author    = "Ijaz, Ramla and Boos, Kevin and Zhong, Lin",
  abstract  = "This paper reports our experience of providing lightweight
               correctness guarantees to an open-source Rust-based OS, Theseus.
               First, we report new developments in intralingual design that
               leverage Rust's type system to enforce invariants at compile
               time, trusting the Rust compiler. Second, we develop a hybrid
               proof approach that combines formal verification, type checking,
               and informal reasoning. By lessening the strength of correctness
               guarantees, this hybrid approach substantially lowers the proof
               burden. We share our experience of applying this approach to the
               memory subsystem of Theseus, demonstrate its utility, and
               quantify its reduced proof effort.",
  publisher = "Association for Computing Machinery",
  pages     = "1--8",
  series    = "KISV '23",
  month     =  oct,
  year      =  2023,
  address   = "New York, NY, USA",
  keywords  = "slr-paper-rust-kernel;slr-rust-read;slr-forward-snowball;acm.bib",
  location  = "Koblenz, Germany"
}

@INPROCEEDINGS{Chen2023-wb,
  title     = "Atmosphere: Towards Practical Verified Kernels in Rust",
  booktitle = "Proceedings of the 1st Workshop on Kernel Isolation, Safety and
               Verification",
  author    = "Chen, Xiangdong and Li, Zhaofeng and Mesicek, Lukas and
               Narayanan, Vikram and Burtsev, Anton",
  abstract  = "Historically, development of formally-verified operating systems
               was a challenging, time-consuming undertaking that relied on a
               narrow formal verification expertise and required many
               person-years of effort. We argue, however, that the balance of
               practicality is finally changing with development of automated
               verification tools that leverage a unique combination of the
               linear type system of Rust and automated verification based on
               satisfiability modulo theories (SMT). Our work leverages, Verus,
               a new SMT-based verifier for Rust, for development of a minimal
               yet practical microkernel, Atmosphere. Atmosphere is designed as
               a full-featured microkernel conceptually similar to the line of
               early L4 microkernels. We develop all code in Rust and prove its
               functional correctness, i.e., refinement of a high-level
               specification with Verus. Our experience shows that Verus
               provides a collection of practical features that significantly
               lower the burden of a verification effort making it possible to
               reason about correctness of the low-level systems code, e.g.,
               low-level memory and address space management, recursive data
               structures like linked lists and page tables, etc. On average
               our code has proof-to-code ratio of 7.5:1 which is significantly
               lower than in prior approaches.",
  publisher = "Association for Computing Machinery",
  pages     = "9--17",
  series    = "KISV '23",
  month     =  oct,
  year      =  2023,
  address   = "New York, NY, USA",
  keywords  = "slr-paper-rust-kernel;slr-rust-read;slr-forward-snowball;acm.bib;scopus",
  location  = "Koblenz, Germany"
}

@INPROCEEDINGS{Li2024-yb,
  title     = "{W-Kernel}: An {OS} Kernel Architecture Designed With Isolation
               and Customizability",
  booktitle = "Proceedings of the 2023 5th International Conference on Software
               Engineering and Development",
  author    = "Li, Shaowen and Sato, Hiroyuki",
  abstract  = "We propose a new operating system architecture called W-kernel.
               Traditional commodity operating systems are monolithic which is
               easy to design and offers decent performance. However, as system
               complexity increases, the lack of isolation in a monolithic
               kernel compromises the system's availability, reliability, and
               maintainability. System designers have been exploring various
               approaches to enhancing isolation in operating systems.
               Achieving isolation requires a balance of its overheads,
               flexibility, and strength. Furthermore, due to the enhanced
               capabilities of hardware as well as the stronger performance
               requirement from applications, we have witnessed many proposals
               working on blurring the boundary between the kernel space and
               the user space, i.e., user-level jobs are being moved inside the
               kernel or directly onto the hardware. The next-generation kernel
               should be customizable so that different parties can construct
               their own kernel according to their specific needs by including
               only necessary components implemented using whatever languages
               they prefer. W-kernel is designed with these two goals:
               isolation and customizability. W-kernel is developed from
               scratch in Rust to leverage the power of modern safe language
               and it further implements a separation of heaps. In combination,
               these provide low-cost and flexible isolation. In addition,
               W-kernel adopts the design of an exokernel to separate resource
               protection from management and embeds a WebAssembly(WASM)
               runtime inside the kernel space for organizing and customizing
               kernel components.WebAssembly is a portable execution
               environment and was originally proposed as a web platform to
               support the deployment of applications developed in diverse
               programming languages. We leverage this and exploit the
               opportunity of using WASM as a platform for kernel components.
               We are the first to discuss its practicability as being built
               into the kernel space for kernel component management. With the
               absence of any costly hardware isolation mechanisms and a
               combination of Rust's safety, exokernel's separation, and
               WebAssembly's modularity, we argue that W-kernel is an effective
               option for building more complex operating systems.",
  publisher = "Association for Computing Machinery",
  pages     = "42 -- 50",
  series    = "ICSED '23",
  year      =  2024,
  address   = "New York, NY, USA",
  keywords  = "Isolation, Operating systems, Security,
               WebAssembly;slr-paper-rust-kernel;slr-rust-read;slr-forward-snowball;acm.bib;scopus",
  location  = "<conf-loc>, <city>Singapore</city>,
               <country>Singapore</country>, </conf-loc>"
}

@ARTICLE{Li2024-be,
  title    = "{rOOM}: A {Rust-Based} Linux Out of Memory Kernel Component",
  author   = "Li, Linhan and Zhang, Qianying and Xu, Zekun and Zhao, Shijun and
              Shi, Zhiping and Guan, Yong",
  journal  = "IEICE Trans. Inf. Syst.",
  volume   = "E107.D",
  number   =  3,
  pages    = "245--256",
  year     =  2024,
  keywords = "slr-paper-rust-kernel;slr-rust-read;slr-forward-snowball;scopus"
}

% The entry below contains non-ASCII chars that could not be converted
% to a LaTeX equivalent.
@ARTICLE{Culic2022-bk,
  title    = "A {Low-Latency} Optimization of a {Rust-Based} Secure Operating
              System for Embedded Devices",
  author   = "Culic, Ioana and Vochescu, Alexandru and Radovici, Alexandru",
  abstract = "Critical systems such as drone control or power grid control
              applications rely on embedded devices capable of a real-time
              response. While much research and advancements have been made to
              implement low-latency and real-time characteristics, the security
              aspect has been left aside. All current real-time operating
              systems available for industrial embedded devices are implemented
              in the C programming language, which makes them prone to memory
              safety issues. As a response to this, Tock, an innovative secure
              operating system for embedded devices written completely in Rust,
              has recently appeared. The only downside of Tock is that it lacks
              the low-latency real-time component. Therefore, the purpose of
              this research is to leverage the extended Berkeley Packet Filter
              technology used for efficient network traffic processing and to
              add the low-latency capability to Tock. The result is a secure
              low-latency operating system for embedded devices and
              microcontrollers capable of handling interrupts at latencies as
              low as 60 µs.",
  journal  = "Sensors",
  volume   =  22,
  number   =  22,
  month    =  nov,
  year     =  2022,
  keywords = "RTOS; Tock; eBPF; embedded; low-latency; real-time; rust;
              security;slr-paper-rust-kernel;slr-rust-read;slr-forward-snowball;scopus",
  language = "en"
}

@INPROCEEDINGS{Boos2020-zh,
  title     = "Theseus: an experiment in operating system structure and state
               management",
  booktitle = "14th {USENIX} Symposium on Operating Systems Design and
               Implementation ({OSDI} 20)",
  author    = "Boos, Kevin and Liyanage, Namitha and Ijaz, Ramla and Zhong, Lin",
  pages     = "1--19",
  year      =  2020,
  keywords  = "slr-paper-rust-kernel;slr-rust-read;slr-forward-snowball;scopus"
}

@INPROCEEDINGS{Miller2021-pg,
  title    = "High velocity kernel file systems with bento",
  author   = "Miller, Samantha and Zhang, Kaiyuan and Chen, Mengqi and
              Jennings, Ryan and Chen, Ang and Zhuo, Danyang and Anderson,
              Thomas",
  pages    = "65 -- 78",
  year     =  2021,
  keywords = "slr-paper-rust-kernel;slr-rust-read;scopus"
}

% The entry below contains non-ASCII chars that could not be converted
% to a LaTeX equivalent.
@MISC{United_States_Gov2024-pp,
  title        = "Press Release: Future Software Should Be Memory Safe",
  booktitle    = "The White House",
  author       = "{United States Gov}",
  abstract     = "Leaders in Industry Support White House Call to Address Root
                  Cause of Many of the Worst Cyber Attacks Read the full report
                  here WASHINGTON -- Today, the White House Office of the
                  National Cyber Director (ONCD) released a report calling on
                  the technical community to proactively reduce the attack
                  surface in cyberspace. ONCD makes the…",
  month        =  feb,
  year         =  2024,
  howpublished = "\url{https://www.whitehouse.gov/oncd/briefing-room/2024/02/26/press-release-technical-report/}",
  note         = "Accessed: 2024-3-13",
  keywords     = "slr-paper-rust-kernel;slr-rust-read;Rust Kernel - SLR
                  2019-2024",
  language     = "en"
}

@MISC{The_kernel_development_community_undated-iw,
  title        = "Rust --- The Linux Kernel documentation",
  author       = "{The kernel development community}",
  howpublished = "\url{https://docs.kernel.org/rust/index.html}",
  note         = "Accessed: 2024-4-1",
  keywords     = "slr-paper-rust-kernel;slr-rust-read",
  language     = "en"
}

@MANUAL{Stuart2007-cc,
  title        = "Guidelines for performing Systematic Literature Reviews in
                  Software Engineering",
  author       = "Stuart, Kitchenham, Barbara And",
  year         =  2007,
  keywords     = "slr-paper-rust-kernel;slr-rust-read;Rust Kernel - SLR
                  2019-2024",
  organization = "School of Computer Science and Mathematics, Keele University"
}

@MISC{Wikipedia_contributors2024-zr,
  title        = "Hackers (film)",
  booktitle    = "Wikipedia, The Free Encyclopedia",
  author       = "{Wikipedia contributors}",
  abstract     = "Hackers is a 1995 American crime thriller film directed by
                  Iain Softley and starring Jonny Lee Miller, Angelina Jolie,
                  Jesse Bradford, Matthew Lillard, Laurence Mason, Renoly
                  Santiago, Lorraine Bracco, and Fisher Stevens. The film
                  follows a group of high school hackers and their involvement
                  in an attempted theft. Made in the mid-1990s when the
                  Internet was just starting to become popular among the
                  general public, it reflects the ideals laid out in the Hacker
                  Manifesto quoted in the film: ``This is our world now... the
                  world of the electron and the switch... We exist without skin
                  color, without nationality, without religious bias... and you
                  call us criminals... Yes, I am a criminal. My crime is that
                  of curiosity.''",
  month        =  mar,
  year         =  2024,
  howpublished = "\url{https://en.wikipedia.org/w/index.php?title=Hackers_(film)&oldid=1211833509}",
  note         = "Accessed: NA-NA-NA",
  keywords     = "slr-paper-rust-kernel;slr-rust-read"
}

@INPROCEEDINGS{Narayanan2020-gs,
  title    = "Red Leaf: Isolation and communication in a safe operating system",
  author   = "Narayanan, Vikram and Detweiler, David and Huang, Tianjiao and
              Appel, Dan and Li, Zhaofeng and Zellweger, Gerd and Burtsev,
              Anton",
  pages    = "21 -- 39",
  year     =  2020,
  keywords = "slr-paper-rust-kernel;slr-rust-read;scopus"
}
